name: Deploy Telegram Bot

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH key with passphrase
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          eval $(ssh-agent -s)
          echo "${{ secrets.SSH_KEY_PASSPHRASE }}" | SSH_ASKPASS=/bin/cat ssh-add ~/.ssh/deploy_key
          echo "StrictHostKeyChecking no" > ~/.ssh/config

      - name: Test SSH Connection
        run: |
          echo "Testing SSH connection..."
          ssh -i ~/.ssh/deploy_key -v ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "echo 'SSH connection successful!'"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run tests (if any)
        run: |
          if [ -f tests/test_*.py ]; then
            python -m pytest
          fi
        continue-on-error: true

      - name: Backup existing .env and data
        run: |
          echo "Creating backup directory..."
          mkdir -p ~/backups
          
          echo "Backing up .env file..."
          scp -v -i ~/.ssh/deploy_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/anna-telegram-bot/.env ~/backups/env.backup || echo "No .env file to backup"
          
          echo "Backing up media directory..."
          scp -v -r -i ~/.ssh/deploy_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/anna-telegram-bot/media ~/backups/media.backup || echo "No media directory to backup"
          
          echo "Backing up data directory..."
          scp -v -r -i ~/.ssh/deploy_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/anna-telegram-bot/data ~/backups/data.backup || echo "No data directory to backup"

      - name: Deploy to VPS
        run: |
          echo "Creating project directory on VPS..."
          ssh -i ~/.ssh/deploy_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "mkdir -p ~/anna-telegram-bot"
          
          echo "Installing rsync on VPS if not present..."
          ssh -i ~/.ssh/deploy_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "which rsync || sudo apt-get update && sudo apt-get install -y rsync"
          
          echo "Syncing repository to VPS..."
          rsync -avz --progress --delete \
            --exclude='.env' \
            --exclude='media/*' \
            --exclude='data/*' \
            -e "ssh -i ~/.ssh/deploy_key" \
            ./ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/anna-telegram-bot/
          
          echo "Sync completed."

      - name: Restore backups and restart bot
        run: |
          echo "Restoring backups..."
          
          if [ -f ~/backups/env.backup ]; then
            echo "Restoring .env file..."
            scp -v -i ~/.ssh/deploy_key ~/backups/env.backup ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/anna-telegram-bot/.env
          fi
          
          if [ -d ~/backups/media.backup ]; then
            echo "Restoring media directory..."
            ssh -i ~/.ssh/deploy_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "mkdir -p ~/anna-telegram-bot/media"
            scp -v -r -i ~/.ssh/deploy_key ~/backups/media.backup/* ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/anna-telegram-bot/media/ || echo "No media files to restore"
          fi
          
          if [ -d ~/backups/data.backup ]; then
            echo "Restoring data directory..."
            ssh -i ~/.ssh/deploy_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "mkdir -p ~/anna-telegram-bot/data"
            scp -v -r -i ~/.ssh/deploy_key ~/backups/data.backup/* ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/anna-telegram-bot/data/ || echo "No data files to restore"
          fi
          
          echo "Setting permissions and restarting bot..."
          ssh -v -i ~/.ssh/deploy_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cd ~/anna-telegram-bot && \
            chmod +x start.sh stop.sh entrypoint.sh && \
            echo 'Stopping old bot instance...' && \
            ./stop.sh && \
            echo 'Starting new bot instance...' && \
            ./start.sh"

      - name: Check deployment status
        run: |
          echo "Checking deployment status..."
          ssh -i ~/.ssh/deploy_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cd ~/anna-telegram-bot && \
            docker compose ps && \
            docker compose logs --tail=50"

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up sensitive files..."
          rm -f ~/.ssh/deploy_key
          rm -rf ~/backups
