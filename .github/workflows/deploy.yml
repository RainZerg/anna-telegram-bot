name: Deploy Telegram Bot

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install expect
        run: sudo apt-get update && sudo apt-get install -y expect

      - name: Set up SSH key with passphrase
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          # Start SSH agent
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          
          # Create .ssh directory with correct permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Write the private key to a file
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Add key to SSH agent with passphrase using expect
          expect -f - <<'EOD'
          spawn ssh-add ~/.ssh/deploy_key
          expect "Enter passphrase"
          send "${{ secrets.SSH_KEY_PASSPHRASE }}\n"
          expect eof
          EOD
          
          # Add host to known hosts
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          echo "Testing SSH connection..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "echo 'SSH connection successful!'"

      - name: Deploy to VPS
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          echo "Creating project directory on VPS..."
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "mkdir -p ~/anna-telegram-bot"
          
          echo "Syncing repository to VPS..."
          rsync -avz --progress --delete \
            --exclude='.env' \
            --exclude='media/*' \
            --exclude='data/*' \
            ./ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/anna-telegram-bot/

      - name: Configure and start bot
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          echo "Setting up permissions and starting bot..."
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cd ~/anna-telegram-bot && \
            chmod +x start.sh stop.sh entrypoint.sh && \
            ./stop.sh || true && \
            ./start.sh"

      - name: Check deployment status
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          echo "Checking deployment status..."
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cd ~/anna-telegram-bot && \
            docker compose ps && \
            docker compose logs --tail=50"

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up sensitive files..."
          rm -f ~/.ssh/deploy_key
