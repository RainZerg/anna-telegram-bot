name: Deploy Telegram Bot

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure SSH
        run: |
          # Create .ssh directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Write SSH key
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Write known hosts directly
          echo "${{ secrets.SSH_HOST }} $(ssh-keyscan ${{ secrets.SSH_HOST }} 2>/dev/null | grep -v '^#')" > ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          
          # Create strict SSH config
          cat > ~/.ssh/config << EOF
          Host ${{ secrets.SSH_HOST }}
            HostName ${{ secrets.SSH_HOST }}
            User ${{ secrets.SSH_USERNAME }}
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking accept-new
            UserKnownHostsFile ~/.ssh/known_hosts
          EOF
          chmod 600 ~/.ssh/config
          
          # Debug: Show SSH files
          ls -la ~/.ssh/

      - name: Test SSH Connection
        run: |
          # First, verify the host key
          ssh-keyscan -H ${{ secrets.SSH_HOST }}
          
          # Then test connection with detailed output
          ssh -vvv ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "echo 'Connection test successful'"

      - name: Deploy to VPS
        if: success()
        run: |
          echo "Creating project directory on VPS..."
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "mkdir -p ~/anna-telegram-bot"
          
          echo "Syncing repository to VPS..."
          rsync -avz --delete \
            --exclude='.env' \
            --exclude='media/*' \
            --exclude='data/*' \
            ./ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/anna-telegram-bot/

      - name: Cleanup
        if: always()
        run: |
          rm -rf ~/.ssh/

      - name: Deploy to VPS
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          echo "Creating project directory on VPS..."
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "mkdir -p ~/anna-telegram-bot"
          
          echo "Syncing repository to VPS..."
          rsync -avz --progress --delete \
            --exclude='.env' \
            --exclude='media/*' \
            --exclude='data/*' \
            ./ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/anna-telegram-bot/

      - name: Configure and start bot
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          echo "Setting up permissions and starting bot..."
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cd ~/anna-telegram-bot && \
            chmod +x start.sh stop.sh entrypoint.sh && \
            ./stop.sh || true && \
            ./start.sh"

      - name: Check deployment status
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          echo "Checking deployment status..."
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cd ~/anna-telegram-bot && \
            docker compose ps && \
            docker compose logs --tail=50"

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up sensitive files..."
          rm -f ~/.ssh/deploy_key
