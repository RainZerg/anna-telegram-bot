name: Deploy Telegram Bot

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          # Create .ssh directory with proper permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Create empty key file first with proper permissions
          touch ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Write the key content
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          
          # Create and secure config file
          touch ~/.ssh/config
          chmod 600 ~/.ssh/config
          echo "Host *
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
            UserKnownHostsFile ~/.ssh/known_hosts" > ~/.ssh/config
          
          # Create and secure known_hosts
          touch ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          
          # Start SSH agent
          eval "$(ssh-agent -s)"
          
          # Add key to agent (without passphrase for now)
          ssh-add ~/.ssh/id_rsa

      - name: Test SSH Connection
        run: |
          # Test connection with verbose output
          ssh -v ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "echo 'SSH connection successful!'"

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa
          rm -f ~/.ssh/config
          rm -f ~/.ssh/known_hosts

      - name: Deploy to VPS
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          echo "Creating project directory on VPS..."
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "mkdir -p ~/anna-telegram-bot"
          
          echo "Syncing repository to VPS..."
          rsync -avz --progress --delete \
            --exclude='.env' \
            --exclude='media/*' \
            --exclude='data/*' \
            ./ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/anna-telegram-bot/

      - name: Configure and start bot
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          echo "Setting up permissions and starting bot..."
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cd ~/anna-telegram-bot && \
            chmod +x start.sh stop.sh entrypoint.sh && \
            ./stop.sh || true && \
            ./start.sh"

      - name: Check deployment status
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          echo "Checking deployment status..."
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cd ~/anna-telegram-bot && \
            docker compose ps && \
            docker compose logs --tail=50"

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up sensitive files..."
          rm -f ~/.ssh/deploy_key
